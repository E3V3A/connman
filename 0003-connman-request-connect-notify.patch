diff --git a/src/agent-connman.c b/src/agent-connman.c
index 9ccba72..9d6e511 100644
--- a/src/agent-connman.c
+++ b/src/agent-connman.c
@@ -537,7 +537,7 @@ int __connman_agent_request_login_input(struct connman_service *service,
 		dbus_message_unref(message);
 		g_free(username_password_reply);
 		return err;
-	}
+       }
 
 	dbus_message_unref(message);
 
@@ -569,6 +569,12 @@ done:
 	g_free(browser_reply_data);
 }
 
+struct request_connect_reply_data {
+	struct connman_service *service;
+	request_connect_cb_t callback;
+	void *user_data;
+};
+
 int __connman_agent_request_browser(struct connman_service *service,
 				browser_authentication_cb_t callback,
 				const char *url, void *user_data)
@@ -625,3 +631,104 @@ int __connman_agent_request_browser(struct connman_service *service,
 
 	return -EINPROGRESS;
 }
+
+
+static void request_connect_cb(struct connman_service *service,
+				connman_bool_t authentication_done,
+				const char *error,void *user_data)
+{
+
+      //  struct request_connect_reply_data *connect_reply_data = user_data;
+      //handle reply or timeout here
+
+    DBG("request_connect_cb %s %i", error, authentication_done);
+}
+
+static void request_connect_reply(DBusMessage *reply, void *user_data)
+{
+    DBG("request_connect_reply");
+	struct request_connect_reply_data *connect_reply_data = user_data;
+	connman_bool_t result = FALSE;
+	const char *error = NULL;
+
+	if (dbus_message_get_type(reply) == DBUS_MESSAGE_TYPE_ERROR) {
+		error = dbus_message_get_error_name(reply);
+		goto done;
+	}
+
+	result = TRUE;
+
+done:
+	connect_reply_data->callback(connect_reply_data->service, result,
+					error, connect_reply_data->user_data);
+	g_free(connect_reply_data);
+
+}
+
+int __connman_agent_request_connection(void *user_data)
+{
+
+    int tryit = (int)user_data;
+    if (tryit == 1) {
+
+    request_connect_cb_t callback = request_connect_cb;
+    DBusMessage *message;
+    struct request_connect_reply_data *connect_reply_data;
+    DBusMessageIter iter;
+    const char *agent_sender, *agent_path;
+    int err;
+
+    connman_agent_get_info(&agent_sender, &agent_path);
+    if (agent_path == NULL) {
+        return -ESRCH;
+    }
+
+    message = dbus_message_new_method_call(agent_sender, agent_path,
+                                           CONNMAN_AGENT_INTERFACE,
+                                           "RequestConnect");
+
+    if (message == NULL) {
+        return -ENOMEM;
+    }
+
+    struct connman_service *def_service;
+    def_service = __connman_service_get_default();
+    if (def_service == NULL) {
+        DBG("def_service is NULL, partner");
+    }
+
+//    dbus_message_iter_init_append(message, &iter);
+//    path = __connman_service_get_path(service);
+
+//    dbus_message_iter_append_basic(&iter,
+//				DBUS_TYPE_OBJECT_PATH, &path);
+
+    connect_reply_data = g_try_new0(struct request_connect_reply_data, 1);
+    if (connect_reply_data == NULL) {
+        dbus_message_unref(message);
+        return -ENOMEM;
+    }
+
+    connect_reply_data->service = def_service;
+    connect_reply_data->callback = callback;
+    connect_reply_data->user_data = user_data;
+// TODO is autoconnect - do not send
+// TODO get something into def_service
+
+    err = connman_agent_queue_message(def_service, message,
+                                      (120 * 1000), //timeout
+                                      request_connect_reply, connect_reply_data);
+
+    if (err < 0 && err != -EBUSY) {
+        DBG("error %d sending connect request", err);
+        dbus_message_unref(message);
+        g_free(connect_reply_data);
+        return err;
+    }
+
+    dbus_message_unref(message);
+    }
+    return -EINPROGRESS;
+}
+
+
diff --git a/src/agent.c b/src/agent.c
index 3be4b61..93b47d5 100644
--- a/src/agent.c
+++ b/src/agent.c
@@ -177,7 +177,7 @@ int connman_agent_queue_message(void *user_context,
 	struct connman_agent_driver *driver;
 	int err;
 
-	if (user_context == NULL || callback == NULL)
+	if (/*user_context == NULL ||*/ callback == NULL)
 		return -EBADMSG;
 
 	queue_data = g_new0(struct connman_agent, 1);
@@ -187,11 +187,12 @@ int connman_agent_queue_message(void *user_context,
 	driver = get_driver();
 	DBG("driver %p", driver);
 
-	if (driver != NULL && driver->context_ref != NULL)
+  if (user_context != NULL) {
+      if (driver != NULL && driver->context_ref != NULL)
 		queue_data->user_context = driver->context_ref(user_context);
 	else
 		queue_data->user_context = user_context;
-
+  }
 	queue_data->msg = dbus_message_ref(msg);
 	queue_data->timeout = timeout;
 	queue_data->callback = callback;
diff --git a/src/connman.h b/src/connman.h
index 70178d8..eaeb567 100644
--- a/src/connman.h
+++ b/src/connman.h
@@ -94,6 +94,9 @@ typedef void (* authentication_cb_t) (struct connman_service *service,
 typedef void (* browser_authentication_cb_t) (struct connman_service *service,
 				connman_bool_t authentication_done,
 				const char *error, void *user_data);
+typedef void (* request_connect_cb_t) (struct connman_service *service,
+				connman_bool_t authentication_done,
+				const char *error, void *user_data);
 int __connman_agent_request_passphrase_input(struct connman_service *service,
 				authentication_cb_t callback, void *user_data);
 int __connman_agent_request_login_input(struct connman_service *service,
@@ -101,6 +104,8 @@ int __connman_agent_request_login_input(struct connman_service *service,
 int __connman_agent_request_browser(struct connman_service *service,
 				browser_authentication_cb_t callback,
 				const char *url, void *user_data);
+int __connman_agent_request_connection( /*struct connman_service *service,
+        authentication_cb_t callback, */void *user_data);
 
 #include <connman/log.h>
 
diff --git a/src/dnsproxy.c b/src/dnsproxy.c
index ce61909..41dccee 100644
--- a/src/dnsproxy.c
+++ b/src/dnsproxy.c
@@ -2662,6 +2662,8 @@ static gboolean tcp_listener_event(GIOChannel *channel, GIOCondition condition,
 	return TRUE;
 }
 
+int tryit = 0;
+
 static gboolean udp_listener_event(GIOChannel *channel, GIOCondition condition,
 							gpointer user_data)
 {
@@ -2677,7 +2679,7 @@ static gboolean udp_listener_event(GIOChannel *channel, GIOCondition condition,
 		connman_error("Error with UDP listener channel");
 		ifdata->udp_listener_watch = 0;
 		return FALSE;
-	}
+	} 
 
 	sk = g_io_channel_unix_get_fd(channel);
 
@@ -2693,8 +2695,20 @@ static gboolean udp_listener_event(GIOChannel *channel, GIOCondition condition,
 	if (err < 0 || (g_slist_length(server_list) == 0)) {
 		send_response(sk, buf, len, (void *)&client_addr,
 				client_addr_len, IPPROTO_UDP);
+//  error no connection.
+
+    if (tryit == 0) {
+        tryit = 1;
+          // tell agent about it
+        if (__connman_agent_request_connection((void*)tryit) == -ESRCH) {
+        }
+    }
+
 		return TRUE;
-	}
+	} else {
+      if (tryit == 1)
+          tryit = 0;
+  }
 
 	req = g_try_new0(struct request_data, 1);
 	if (req == NULL)
